"use strict";(self.webpackChunknotes_web=self.webpackChunknotes_web||[]).push([[7332],{4534:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>n,metadata:()=>a,toc:()=>u});var i=r(4848),t=r(8453);const n={slug:"pub-sub",title:"Publisher Subscriber Architecture",sidebar_position:13},c="Publisher Subscriber Architecture",a={id:"system-design/architecture/pub-sub",title:"Publisher Subscriber Architecture",description:'This is a slight variation over the event-driven architecture. Here, instead of having events specifically sent to a particular target, the information is related to multiple components who have "subscribed" to that information. There are 3 important terms related to this architecture.',source:"@site/docs/system-design/architecture/pub-sub.md",sourceDirName:"system-design/architecture",slug:"/system-design/architecture/pub-sub",permalink:"/system-design/architecture/pub-sub",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{slug:"pub-sub",title:"Publisher Subscriber Architecture",sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Event Driven Architecture",permalink:"/system-design/architecture/event-driven"}},o={},u=[{value:"Applications of Publisher Subscriber Architecture",id:"applications-of-publisher-subscriber-architecture",level:2},{value:"Advantages of Publisher Subscriber Architecture",id:"advantages-of-publisher-subscriber-architecture",level:2},{value:"Disadvantages of Publisher Subscriber Architecture",id:"disadvantages-of-publisher-subscriber-architecture",level:2}];function l(e){const s={h1:"h1",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"publisher-subscriber-architecture",children:"Publisher Subscriber Architecture"}),"\n",(0,i.jsx)(s.p,{children:'This is a slight variation over the event-driven architecture. Here, instead of having events specifically sent to a particular target, the information is related to multiple components who have "subscribed" to that information. There are 3 important terms related to this architecture.'}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Publishers"}),": The entities producing the event information."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Subscribers"}),": The entities consuming the event information."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Event bus"}),": The component of the system responsible for transporting the events from the publishers to the subscribers."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"There is a certain dynamic nature to the publishers and subscribers. Depending on the architecture of the system, one or more subscribers/publishers may be added/removed during the course of operation of the system. The event-bus is a more central bus as compared to a single message queue, and can perform operations on the messages like topic-filtering and content-filtering."}),"\n",(0,i.jsx)("div",{class:"img-center",children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Publisher Subscriber Arch",src:r(9883).A+"",width:"1052",height:"560"})})}),"\n",(0,i.jsx)(s.h2,{id:"applications-of-publisher-subscriber-architecture",children:"Applications of Publisher Subscriber Architecture"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Event-Driven Systems"}),": Where a single event is consumed by a large number of subscribers. For example, change in stock price might trigger many systems that perform market predictions."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Messaging Systems"}),": Dynamic group-messaging systems might require this kind of arch."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"IoT"}),": Data analysis software might subscribe to a lot of IoT sensors through this system."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Triggering services"}),": This arch can be used a triggering mechanism for many on-prem and cloud services/microservices."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"advantages-of-publisher-subscriber-architecture",children:"Advantages of Publisher Subscriber Architecture"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Decoupling allows us to change and update both systems independently."}),"\n",(0,i.jsx)(s.li,{children:"Flexibility, vecause it allows easy addition and removal of publisher and subscribers."}),"\n",(0,i.jsx)(s.li,{children:"If we use complex message routing patterns, it is also scalable with many subscribers without affecting system performance."}),"\n",(0,i.jsx)(s.li,{children:"Asynchronous communication doesn't let the components get blocked, hence increasing throughput."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"disadvantages-of-publisher-subscriber-architecture",children:"Disadvantages of Publisher Subscriber Architecture"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Complex to initially set up and may take up development time."}),"\n",(0,i.jsx)(s.li,{children:"Some performance overhead, especially important if not optimized well."}),"\n",(0,i.jsx)(s.li,{children:"Routing rules may get very complicated, especially if need to route messages to very specific subscribers."}),"\n",(0,i.jsx)(s.li,{children:"Failure on the message broker or subscriber's side can cause loss of messages."}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},9883:(e,s,r)=>{r.d(s,{A:()=>i});const i=r.p+"assets/images/pub-sub-edd8ec6d0150338ecc24b1bc7f9a781f.png"},8453:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>a});var i=r(6540);const t={},n=i.createContext(t);function c(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(n.Provider,{value:s},e.children)}}}]);